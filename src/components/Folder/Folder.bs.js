// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

import './Folder.css'
;

function createNewFolder(name, id) {
  return {
          id: id,
          name: name,
          folders: [],
          files: []
        };
}

function findFolderById(currentFolder, id) {
  if (currentFolder.id === id) {
    return currentFolder;
  } else if (currentFolder.folders.length === 0) {
    return ;
  } else {
    return Belt_Option.getWithDefault(Caml_option.undefined_to_opt(Belt_Array.map(currentFolder.folders, (function (folder) {
                            return findFolderById(folder, id);
                          })).find(Belt_Option.isSome)), undefined);
  }
}

function replaceFoldersForTargetFolder(originalRootFolder, targetFolderId, newFolders) {
  var rootFolder = structuredClone(originalRootFolder);
  var targetFolder = findFolderById(rootFolder, targetFolderId);
  Belt_Option.map(targetFolder, (function (folder) {
          folder.folders = newFolders;
        }));
  return rootFolder;
}

function addFolderToRoot(rootFolder, targetFolderId, name, id) {
  var targetFolder = findFolderById(rootFolder, targetFolderId);
  var updatedTargetFolder = Belt_Option.map(targetFolder, (function (folder) {
          return folder.folders.concat([createNewFolder(name, id)]);
        }));
  if (updatedTargetFolder !== undefined) {
    return replaceFoldersForTargetFolder(rootFolder, targetFolderId, updatedTargetFolder);
  } else {
    return rootFolder;
  }
}

function addFileToFolder(originalRootFolder, targetId, targetContent) {
  var rootFolder = structuredClone(originalRootFolder);
  var targetFolder = findFolderById(rootFolder, targetId);
  Belt_Option.map(targetFolder, (function (t) {
          t.files = t.files.concat([targetContent]);
        }));
  return rootFolder;
}

function make(param) {
  var recLevel = param.recLevel;
  var handleClick = param.handleClick;
  var currentFolder = param.currentFolder;
  var onDoubleClick = param.onDoubleClick;
  var match = React.useState(function () {
        return false;
      });
  var setOpen = match[1];
  var isOpen = match[0];
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              currentFolder.name,
                              JsxRuntime.jsx("span", {
                                    children: ">",
                                    style: {
                                      marginLeft: "6px",
                                      transform: isOpen ? "rotate(90deg)" : ""
                                    }
                                  })
                            ],
                            className: "flex-folder-name-inner folder-name",
                            style: {
                              paddingLeft: String((recLevel << 5)) + "px"
                            }
                          }),
                      role: "button",
                      onClick: (function (param) {
                          Curry._1(setOpen, (function (prev) {
                                  return !prev;
                                }));
                          Curry._1(handleClick, currentFolder.id);
                        })
                    }),
                isOpen ? JsxRuntime.jsxs(JsxRuntime.Fragment, {
                        children: [
                          JsxRuntime.jsx("div", {
                                children: Belt_Array.map(currentFolder.files, (function (file) {
                                        return JsxRuntime.jsx("div", {
                                                    children: file,
                                                    style: {
                                                      background: "white",
                                                      padding: "0"
                                                    }
                                                  }, file);
                                      })),
                                style: {
                                  paddingLeft: String((recLevel << 5)) + "px"
                                }
                              }),
                          Belt_Array.map(currentFolder.folders, (function (folder) {
                                  return JsxRuntime.jsx(Component.make, {
                                              onDoubleClick: onDoubleClick,
                                              currentFolder: folder,
                                              handleClick: handleClick,
                                              recLevel: recLevel + 1 | 0
                                            }, String(folder.id));
                                }))
                        ]
                      }) : JsxRuntime.jsx(JsxRuntime.Fragment, {})
              ],
              onDoubleClick: (function (param) {
                  Curry._1(onDoubleClick, currentFolder.id);
                })
            });
}

var Component = {
  make: make
};

export {
  createNewFolder ,
  findFolderById ,
  replaceFoldersForTargetFolder ,
  addFolderToRoot ,
  addFileToFolder ,
  Component ,
}
/*  Not a pure module */
