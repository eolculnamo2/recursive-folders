// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_module from "rescript/lib/es6/caml_module.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function createNewFolder(name, id) {
  return {
          id: id,
          name: name,
          folders: [],
          files: []
        };
}

function findFolderById(currentFolder, id) {
  if (currentFolder.id === id) {
    return currentFolder;
  } else if (currentFolder.folders.length === 0) {
    return ;
  } else {
    return Belt_Option.getWithDefault(Caml_option.undefined_to_opt(Belt_Array.map(currentFolder.folders, (function (folder) {
                            return findFolderById(folder, id);
                          })).find(Belt_Option.isSome)), undefined);
  }
}

function replaceFoldersForTargetFolder(rootFolder, targetFolderId, newFolders) {
  var targetFolder = findFolderById(rootFolder, targetFolderId);
  Belt_Option.map(targetFolder, (function (folder) {
          folder.folders = newFolders;
        }));
  return rootFolder;
}

function addFolderToRoot(rootFolder, targetFolderId, name, id) {
  var targetFolder = findFolderById(rootFolder, targetFolderId);
  var updatedTargetFolder = Belt_Option.map(targetFolder, (function (folder) {
          return folder.folders.concat([createNewFolder(name, id)]);
        }));
  if (updatedTargetFolder !== undefined) {
    return replaceFoldersForTargetFolder(rootFolder, targetFolderId, updatedTargetFolder);
  } else {
    return rootFolder;
  }
}

var Component = Caml_module.init_mod([
      "Folder.res",
      60,
      4
    ], {
      TAG: /* Module */0,
      _0: [
        [
          /* Function */0,
          "make"
        ],
        [
          /* Function */0,
          "makeProps"
        ]
      ]
    });

function Folder$Component(Props) {
  var currentFolder = Props.currentFolder;
  var handleClick = Props.handleClick;
  var recLevel = Props.recLevel;
  var match = React.useState(function () {
        return false;
      });
  var setOpen = match[1];
  return React.createElement("div", {
              style: {
                marginLeft: String((recLevel << 5)) + "px"
              }
            }, React.createElement("div", {
                  role: "button",
                  onClick: (function (param) {
                      Curry._1(setOpen, (function (prev) {
                              return !prev;
                            }));
                      Curry._1(handleClick, currentFolder.id);
                    })
                }, currentFolder.name), match[0] ? Belt_Array.map(currentFolder.folders, (function (folder) {
                      return React.createElement(Component.make, Curry._5(Component.makeProps, folder, handleClick, recLevel + 1 | 0, undefined, undefined));
                    })) : React.createElement(React.Fragment, undefined));
}

Caml_module.update_mod({
      TAG: /* Module */0,
      _0: [
        [
          /* Function */0,
          "make"
        ],
        [
          /* Function */0,
          "makeProps"
        ]
      ]
    }, Component, {
      make: Folder$Component,
      makeProps: (function (prim0, prim1, prim2, prim3, prim4) {
          var tmp = {
            currentFolder: prim0,
            handleClick: prim1,
            recLevel: prim2
          };
          if (prim3 !== undefined) {
            tmp.key = prim3;
          }
          return tmp;
        })
    });

export {
  createNewFolder ,
  findFolderById ,
  replaceFoldersForTargetFolder ,
  addFolderToRoot ,
  Component ,
}
/* Component Not a pure module */
