// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

function createNewFolder(name, id) {
  return {
          id: id,
          name: name,
          folders: [],
          files: []
        };
}

function findFolderById(currentFolder, id) {
  if (currentFolder.id === id) {
    return currentFolder;
  } else if (currentFolder.folders.length === 0) {
    return ;
  } else {
    return Belt_Option.getWithDefault(Caml_option.undefined_to_opt(Belt_Array.map(currentFolder.folders, (function (folder) {
                            return findFolderById(folder, id);
                          })).find(Belt_Option.isSome)), undefined);
  }
}

function replaceFoldersForTargetFolder(rootFolder, targetFolderId, newFolders) {
  var targetFolder = findFolderById(rootFolder, targetFolderId);
  Belt_Option.map(targetFolder, (function (folder) {
          folder.folders = newFolders;
        }));
  return rootFolder;
}

function addFolderToRoot(rootFolder, targetFolderId, name, id) {
  var targetFolder = findFolderById(rootFolder, targetFolderId);
  var updatedTargetFolder = Belt_Option.map(targetFolder, (function (folder) {
          return folder.folders.concat([createNewFolder(name, id)]);
        }));
  if (updatedTargetFolder !== undefined) {
    return replaceFoldersForTargetFolder(rootFolder, targetFolderId, updatedTargetFolder);
  } else {
    return rootFolder;
  }
}

function make(param) {
  var recLevel = param.recLevel;
  var handleClick = param.handleClick;
  var currentFolder = param.currentFolder;
  var match = React.useState(function () {
        return false;
      });
  var setOpen = match[1];
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: currentFolder.name,
                      role: "button",
                      onClick: (function (param) {
                          Curry._1(setOpen, (function (prev) {
                                  return !prev;
                                }));
                          Curry._1(handleClick, currentFolder.id);
                        })
                    }),
                match[0] ? Belt_Array.map(currentFolder.folders, (function (folder) {
                          return JsxRuntime.jsx(Component.make, {
                                      currentFolder: folder,
                                      handleClick: handleClick,
                                      recLevel: recLevel + 1 | 0
                                    });
                        })) : JsxRuntime.jsx(JsxRuntime.Fragment, {})
              ],
              style: {
                marginLeft: String((recLevel << 5)) + "px"
              }
            });
}

var Component = {
  make: make
};

export {
  createNewFolder ,
  findFolderById ,
  replaceFoldersForTargetFolder ,
  addFolderToRoot ,
  Component ,
}
/* react Not a pure module */
